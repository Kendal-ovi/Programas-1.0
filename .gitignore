from tkinter import *
from tkinter import ttk
from tkinter import messagebox

class Interfaz:
    def __init__(self, ventana):
        self.ventana = ventana
        self.productos = ("Galletas-$10", "Jugo-$8", "Gomitas-$9", "Agua-$7", "Chocolate-$5", "Donas-$11", "Fresco-$8")
        self.cantidad = IntVar()
        self.total = StringVar()
        self.monto_pagado = StringVar()
        self.vuelto = StringVar()
        self.total_acumulado = 0
        self.dibujar()

    def dibujar(self):
        self.ventana.title("Caja Registradora")
        self.ventana.geometry("650x550")
        
        Label(self.ventana, text="Selecciona tu producto: ").place(x=10, y=10)
        Label(self.ventana, text="Selecciona la cantidad: ").place(x=10, y=60)
        Label(self.ventana, text="Total a pagar: ").place(x=450, y=300)
        Label(self.ventana, text="Monto pagado: ").place(x=450, y=350)
        Label(self.ventana, text="Vuelto: ").place(x=450, y=400)
        
        self.combo = ttk.Combobox(self.ventana, state="readonly")
        self.combo.place(x=10, y=35)
        self.combo["values"] = self.productos
        self.combo.current(0)
        
        Entry(self.ventana, textvariable=self.cantidad).place(x=10, y=85)
        Entry(self.ventana, textvariable=self.total, state='readonly').place(x=520, y=300)
        Entry(self.ventana, textvariable=self.monto_pagado).place(x=520, y=350)
        Entry(self.ventana, textvariable=self.vuelto, state='readonly').place(x=520, y=400)
        
        Button(self.ventana, text="Agregar", command=self.agregar_producto).place(x=10, y=110)
        Button(self.ventana, text="Quitar", command=self.quitar_producto).place(x=80, y=110)
        Button(self.ventana, text="Calcular Vuelto", command=self.calcular_vuelto).place(x=450, y=450)
        Button(self.ventana, text="Pagar", command=self.realizar_pago).place(x=550, y=450)
        Button(self.ventana, text="Salir", command=self.salir).place(x=150, y=110)
        
        self.tabla = ttk.Treeview(self.ventana, columns=("Cantidad", "Subtotal"))
        self.tabla.heading("#0", text="Producto")
        self.tabla.heading("Cantidad", text="Cantidad")
        self.tabla.heading("Subtotal", text="Subtotal")
        self.tabla.place(x=10, y=150)

    def agregar_producto(self):
        texto = self.combo.get()
        datos = texto.split("-$")
        producto = datos[0]
        precio = int(datos[1])
        cantidad = self.cantidad.get()
        
        if cantidad <= 0:
            messagebox.showerror("Error", "La cantidad debe ser mayor que 0")
            return
        
        subtotal = precio * cantidad
        self.tabla.insert("", END, text=producto, values=(cantidad, "$" + str(subtotal)))
        self.total_acumulado += subtotal
        self.total.set("$" + str(self.total_acumulado))
        self.cantidad.set(0)  # Reinicio cantidad a 0 después de agregar el producto

    def quitar_producto(self):
        seleccionado = self.tabla.selection()
        if not seleccionado:
            messagebox.showerror("Error", "Seleccione un producto para quitar")
            return
        
        for item in seleccionado:
            producto = self.tabla.item(item, "text")
            cantidad, subtotal = self.tabla.item(item, "values")
            subtotal = int(subtotal.replace("$", ""))
            self.total_acumulado -= subtotal
            self.tabla.delete(item)
        
        self.total.set("$" + str(self.total_acumulado))

    def calcular_vuelto(self):
        try:
            pago = float(self.monto_pagado.get())
            if pago < self.total_acumulado:
                messagebox.showerror("Error", "El monto pagado es insuficiente")
                return
            vuelto = pago - self.total_acumulado
            self.vuelto.set("$" + str(vuelto))
        except ValueError:
            messagebox.showerror("Error", "Ingrese un monto válido")
    def realizar_pago(self):
        try:
            pago = float(self.monto_pagado.get())
            if pago < self.total_acumulado:
                messagebox.showerror("Error", "El monto pagado es insuficiente")
                return
            vuelto = pago - self.total_acumulado
            messagebox.showinfo("Pago Realizado", f"Pago exitoso. Vuelto: ${vuelto}")
            self.vuelto.set("$" + str(vuelto))
            self.limpiar_datos()
        except ValueError:
            messagebox.showerror("Error", "Ingrese un monto válido")

    def limpiar_datos(self):
        self.total_acumulado = 0
        self.total.set("")
        self.monto_pagado.set("")
        self.vuelto.set("")
        for item in self.tabla.get_children():
            self.tabla.delete(item)

    def salir(self):
        self.ventana.destroy()

class InicioSesion:
    def __init__(self, ventana):
        self.ventana = ventana
        self.ventana.title("Inicio de Sesión")
        self.ventana.geometry("300x200")
        
        Label(self.ventana, text="Usuario:  ").place(x=50, y=50)
        Label(self.ventana, text="Contraseña:").place(x=50, y=100)
        
        self.usuario = Entry(self.ventana)
        self.usuario.place(x=130, y=50)
        self.contrasena = Entry(self.ventana, show="*")
        self.contrasena.place(x=130, y=100)
        
        Button(self.ventana, text="Iniciar Sesión", command=self.iniciar_sesion).place(x=110, y=150)
        Button(self.ventana, text="Salir", command=self.salir).place(x=200, y=150)
    
    def iniciar_sesion(self):
        usuario = self.usuario.get()
        contrasena = self.contrasena.get()
        
        if usuario == "ken" and contrasena == "1234":
            self.ventana.destroy()
            ventana_principal = Tk()
            Interfaz(ventana_principal)
            ventana_principal.mainloop()
        else:
            messagebox.showerror("Error", "Usuario o contraseña incorrectos")

    def salir(self):
        self.ventana.destroy()

if __name__ == "__main__":
    ventana_inicio = Tk()
    app = InicioSesion(ventana_inicio)
    ventana_inicio.mainloop()

